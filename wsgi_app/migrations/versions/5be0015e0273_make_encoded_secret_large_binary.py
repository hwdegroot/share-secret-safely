"""Make encoded_secret large binary

Revision ID: 5be0015e0273
Revises: 9da155b08e70
Create Date: 2022-05-23 17:36:29.847688

"""
from alembic import op
import sqlalchemy as sa
from wsgi_app.models import Secret


# revision identifiers, used by Alembic.
revision = '5be0015e0273'
down_revision = '9da155b08e70'
branch_labels = None
depends_on = None


def upgrade():
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    connection = session.connection()
    query = sa.text("SELECT id, encoded_secret FROM secrets")
    result = connection.execute(query)
    secrets = {
        f"{str(x[0])}": x[1] if x[1] is not None else None
        for x in result
    }
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('secrets', 'encoded_secret')
    op.add_column(
        'secrets',
        sa.Column(
            'encoded_secret',
            sa.LargeBinary,
            nullable=True
        )
    )
    for secret in session.query(Secret).all():
        v = secrets[str(secret.id)]
        secret.encoded_secret = v.encode() if v is not None else None

    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    connection = session.connection()
    result = connection.execute("SELECT id, encoded_secret FROM secrets")
    secrets = {
        f"{str(x[0])}": x[1] if x[1] is not None else None
        for x in result
    }
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('secrets', 'encoded_secret')
    op.add_column(
        'secrets',
        sa.Column(
            'encoded_secret',
            sa.UnicodeText,
            nullable=True
        )
    )
    for secret in session.query(Secret).all():
        v = secrets[str(secret.id)]
        secret.encoded_secret = bytes.decode(v) if v is not None else None

    session.commit()
    # ### end Alembic commands ###
