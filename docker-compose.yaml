version: "3.8"
services:
    postgres:
        image: postgres
        restart: always
        environment: &environment # we want to resuse these vars
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}
        volumes:
            - dbfiles:/var/lib/postgresql/data
        healthcheck:
            # We want to know that our database and table is ready to accept connections before
            # we continue. In this way it is safe to run the migrations
            # If we want to use our environment here, we need to get a bash shell first
            test: [ "CMD", "bash", "-c", "pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            timeout: 10s
            interval: 3s
            retries: 10
    npm:
        image: node:18
        command: ["/var/current/npm-run.sh", "--serve"]
        working_dir: /var/current
        volumes:
            - $PWD:/var/current
            - nodemodules:/home/node/node_modules
    app:
        image: registry.gitlab.com/hwdegroot/secret-sharing:python-3.9
        build: .
        command: ["bash", "-c", "/var/current/run.sh"]
        ports:
            - "8080:8080"
        volumes:
            - $PWD:/var/current
        depends_on:
            - postgres
                #   condition: service_healthy
        environment:
            <<: *environment
            POSTGRES_HOST: ${POSTGRES_HOST}
            SQLALCHEMY_TRACK_MODIFICATIONS: ${SQLALCHEMY_TRACK_MODIFICATIONS}
            FLASK_APP: ${FLASK_APP}
            FLASK_ENV: ${FLASK_ENV}
            FLASK_DEBUG: ${FLASK_DEBUG}
            FLASK_RUN_HOST: ${FLASK_RUN_HOST}
            FLASK_RUN_PORT: ${FLASK_RUN_PORT}
            ENCRYPTION_SALT: ${ENCRYPTION_SALT}
            APP_SECRET_KEY: ${APP_SECRET_KEY}
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}

volumes:
    dbfiles: {}
    nodemodules: {}
