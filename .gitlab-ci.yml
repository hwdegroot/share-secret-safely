stages:
    - lint
    - test
    - build
    - deploy
    - release

# python template
.python:
    image: python:3.9-slim
    before_script:
        - apt-get update -qq
        - apt-get install -qqy
            build-essential
            libpq-dev
            python3-psycopg2
        - pip install --upgrade pip
        - pip install pipenv
        - pipenv requirements --dev > /tmp/requirements.txt
        - pip install -r /tmp/requirements.txt

# lint using autopep8
lint:python:
    extends: .python
    stage: lint
    script:
        - autopep8
            --diff
            --max-line-length 100
            --ignore E402
            --exit-code
            --aggressive
            --aggressive
            --recursive
            wsgi_app

lint:requirements:
    extends: .python
    stage: lint
    script:
      - diff requirements-base.txt /tmp/requirements.txt

# unit test
test:unit:
    extends: .python
    stage: test
    coverage: /TOTAL\s*\d+\s*\d+\s*([\d\.]+)%/
    variables:
        JWT_SECRET_KEY: jwtsecret
        APP_SECRET_KEY: supersecretkey
        ENCRYPTION_SALT: _y4nTJVIyUJ7fkZYm2OnT5AYHYS_2YAq3gGQOSW80sI=
        SQLALCHEMY_TRACK_MODIFICATIONS: "False"
        DATABASE_URL: postgres://wedontneedthathere
    script:
        - nosetests test/**/*Test.py
          --with-coverage
          --cover-package=wsgi_app/
          --cover-html
          --cover-html-dir=coverage
          --cover-erase
          --cover-xml
          --cover-xml-file=junit.xml
    artifacts:
        reports:
            junit:
                junit.xml
        paths:
            - coverage/
            - .coverage

build:
    image: node
    stage: build
    script:
        - npm install
        - npm run build
    artifacts:
        name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
        paths:
            - wsgi_app/static/dist

pages:
    stage: deploy
    image: alpine
    script:
        - mv coverage public
    dependencies:
        - test:unit
    artifacts:
        paths:
            - public/
    only:
        - main

heroku:deploy:
    stage: release
    image: ruby:latest
    dependencies:
        - build
    before_script:
        - apt-get update -qy
        - apt-get install -y ruby-dev
        - gem install dpl
    script:
        - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
    only:
        - tags

release:
    image: alpine
    stage: release
    only:
        - tags
    before_script:
        - apk add --update curl jq git
    script:
        - export RELEASE_DESCRIPTION="$(git tag --list "$CI_COMMIT_TAG" --format '%(contents:body)')"
        - export RELEASE_NAME="$(git tag --list "$CI_COMMIT_TAG" --format '%(contents:subject)' | awk -v ORS='\\r\\n' '1')"
        - cat templates/release-template.json
          | sed "s/{{TAG}}/$CI_COMMIT_TAG/g"
          | sed "s/{{RELEASE_NAME}}/$RELEASE_NAME/g"
          | sed "s/{{RELEASE_DESCRIPTION}}/$RELEASE_DESCRIPTION/g" > /tmp/release.$CI_COMMIT_TAG.json
        - cat /tmp/release.$CI_COMMIT_TAG.json
        - curl
          --fail
          --header "Content-Type:application/json"
          --header "JOB-TOKEN:$CI_JOB_TOKEN"
          --data @/tmp/release.$CI_COMMIT_TAG.json
          --request POST
          https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases

sast:
    stage: test
include:
    - template: Security/SAST.gitlab-ci.yml
